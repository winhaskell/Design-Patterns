Structural Patterns（结构型模式）

Adapter（适配器）
将一个类的接口转换成客户希望的另外一个接口。
Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
Convert the interface of a class into another interface clients expect.
Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.

Bridge（桥接）
将抽象部分与它的实现部分分离，使它们都可以独立地变化。
Decouple an abstraction from its implementation so that the two can vary independently.

Composite（组合）
将对象组合成树形结构以表示 “部分-整体” 的层次结构。
Composite 使得用户对于单个对象和组合对象的使用具有一致性。
Compose objects into tree structures to represent part-whole hierarchies.
Composite lets clients treat individual objects and compositions of objects uniformly.

Decorator（装饰）
动态地给一个对象添加一些额外的职责。
就增加功能来说，Decorator 模式相比生成子类更为灵活。
Attach additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to subclassing for extending functionality.

Facade（外观）
为子系统中的一组接口提供一个一致的界面。
Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem easier to use.

Flyweight（享元）
运用共享技术有效地支持大量细粒度的对象。
Use sharing to support large numbers of fine-grained objects efficiently.

Proxy（代理）
为其他对象提供一种代理以控制对这个对象的访问。
Provide a surrogate or placeholder for another object to control access to it.

